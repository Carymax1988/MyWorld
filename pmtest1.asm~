; =========================================
; pmtest1. asm
; 编译 方法： nasm pmtest1. asm -o pmtest1. bin
; ==========================================

%include ”pm. inc” ; 常量, 宏, 以及 一些 说明

org 07c00h
jmp LABEL_ BEGIN

[SECTION .gdt]
; GDT
; 段 基址, 段 界限 , 属性
LABEL_ GDT: Descriptor 0, 0, 0 ; 空 描述 符
LABEL_ DESC_ CODE32: Descriptor 0, SegCode32Len - 1, DA_ C + DA_ 32; 非 一致 代码 段
LABEL_ DESC_ VIDEO: Descriptor 0B8000h, 0ffffh, DA_ DRW ; 显 存 首 地址
; GDT 结束

GdtLen equ $ - LABEL_ GDT ; GDT 长度
GdtPtr dw GdtLen - 1 ; GDT 界限
dd 0 ; GDT 基地址

; GDT 选择 子
SelectorCode32 equ LABEL_ DESC_ CODE32 - LABEL_ GDT
SelectorVideo equ LABEL_ DESC_ VIDEO - LABEL_ GDT
; END of [SECTION .gdt]

[SECTION .s16]
[BITS 16]
LABEL_ BEGIN:
mov ax, cs
mov ds, ax
mov es, ax
mov ss, ax
mov sp, 0100h

; 初始化 32 位 代码 段 描述 符
xor eax, eax
mov ax, cs
shl eax, 4
add eax, LABEL_ SEG_ CODE32
mov word [LABEL_ DESC_ CODE32 + 2], ax
shr eax, 16
mov byte [LABEL_ DESC_ CODE32 + 4], al
mov byte [LABEL_ DESC_ CODE32 + 7], ah

; 为 加载 GDTR 作准备
xor eax, eax
mov ax, ds
shl eax, 4
add eax, LABEL_ GDT ; eax <- gdt 基地址
mov dword [GdtPtr + 2], eax ; [GdtPtr + 2] <- gdt 基地址

; 加载 GDTR
lgdt [GdtPtr]

; 关 中断
cli

; 打开 地址 线 A20
in al, 92h
or al, 00000010b
out 92h, al

; 准备 切换 到 保护 模式
mov eax, cr0
or eax, 1
mov cr0, eax

; 真正 进入 保护 模式
jmp dword SelectorCode32: 0 ; 执行 这一 句 会把 SelectorCode32 装入 cs,
; 并 跳 转到 Code32Selector: 0 处
; END of [SECTION .s16]
	
[SECTION .s32]; 32 位 代码 段. 由 实 模式 跳入.
[BITS 32]

LABEL_ SEG_ CODE32:
mov ax, SelectorVideo
mov gs, ax ; 视频 段 选择 子( 目的)
	
mov edi, (80 * 11 + 79) * 2 ; 屏幕 第 11 行, 第 79 列。
mov ah, 0Ch ; 0000: 黑 底 1100: 红字
mov al, 'P'
mov [gs: edi], ax;

; 到此 停止
jmp $

SegCode32Len equ $ - LABEL_ SEG_ CODE32
; END of [SECTION .s32]
